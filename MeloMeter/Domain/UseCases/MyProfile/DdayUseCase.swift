//
//  DdayUseCase.swift
//  MeloMeter
//
//  Created by Ïò§ÌòÑÌÉù on 2023/08/07.
//

import UIKit
import RxSwift
import RxRelay
import RxCocoa
import Firebase

class DdayUseCase {
    
    private var disposeBag: DisposeBag
    private var coupleRepository: CoupleRepository
    private let calendar = Calendar.current
    var firstDay: PublishRelay<Date>
    var dDayCellArray: PublishRelay<[DdayCellData]>
    
    init(coupleRepository: CoupleRepository) {
        self.coupleRepository = coupleRepository
        self.firstDay = PublishRelay()
        self.dDayCellArray = PublishRelay()
        self.disposeBag = DisposeBag()
    }
    
    func getFirstDay() {
        self.coupleRepository.getCoupleModel()
            .subscribe(onSuccess: { data in
                if let day = data?.firstDay {
                    self.createAnniArray(day)
                    self.firstDay.accept(day)
                }
            })
            .disposed(by: disposeBag)
    }
    
    
    
    func sinceDday(from date: Date) -> String {
        let result = calendar.dateComponents([.day], from: date, to: Date()).day ?? 0
        return result < 0 ? "\(abs(result))Ïùº ÏßÄÎÇ®" : "\(result + 1)Ïùº"
    }
    
    func sinceDday(from date: Date) -> Int {
        let result = calendar.dateComponents([.day], from: date, to: Date()).day ?? 0
        return result < 0 ? abs(result) : (result + 1)
    }
    
    func createAnniArray(_ firstDay: Date) {
        self.coupleRepository.getCoupleModel()
            .subscribe(onSuccess: { data in
                if let dataArray = data?.anniversaries, let firstDay = data?.firstDay {
                    self.dDayCellArray.accept(self.createDdayList(dataArray, firstDay))
                }
            })
            .disposed(by: disposeBag)
    }
    
    func createDdayList(_ dataArray: [DdayCellData],_ firstDay: Date) -> [DdayCellData] {
        var resultArray: [DdayCellData] = []
        var cnt = 1 //Î™áÏ£ºÎÖÑ Ïù∏ÏßÄ Íµ¨Î∂Ñ
        var countDday = ""
//        //ÏãúÏûëÎÇ†Ïßú ÏóÜÏùÑ Í≤ΩÏö∞ Î∂ÑÍ∏∞Ï≤òÎ¶¨
//        guard let dateStart = startDate else {
//            dataDdayTableView.append(DdayCellData(aniName: "Ïó∞Ïï† ÏãúÏûë ÎÇ†ÏßúÎ•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî!", countDdays: "", aniDate: "0000.00.00"))
//            return
//        }
        
        resultArray.append(DdayCellData(dateName: "Ï≤´ ÎßåÎÇ®ü´£", date: firstDay, countDdays: sinceDday(from: firstDay)))
        print("Ïú†ÏºÄ: ",resultArray)
        for i in 1...100 {
            //ÏãúÏûëÏùºÎ∂ÄÌÑ∞ 100Ïùº Îã®ÏúÑ Í∏∞ÎÖêÏùº ÎÇ†Ïßú
            guard let ani = calendar.date(byAdding: .day, value: (i * 100) - 1, to: firstDay) else{return resultArray}
            //ÎÖÑ Îã®ÏúÑ Í∏∞ÎÖêÏùº ÎÇ†Ïßú
            guard let yearAni = calendar.date(byAdding: .year, value: cnt, to: firstDay) else{return resultArray}

            //100Ïùº Îã®ÏúÑ Í∏∞ÎÖêÏùºÏùò ÎÇ†ÏßúÏôÄ ÎÖÑ Îã®ÏúÑ ÎÇ†Ïßú Ï∞®Ïù¥
            if let aniDay = calendar.dateComponents([.day], from: ani, to: yearAni).day {
                //ÏßÄÎÇú Í∏∞ÎÖêÏùº ÌåêÎã®
                if sinceDday(from: ani) > 0 {
                    countDday = "\(sinceDday(from: ani))Ïùº ÎÇ®Ïùå"
                }else if sinceDday(from: ani) == 0 {
                    countDday = "ÎãπÏùº"
                }else {
                    countDday = "\(abs(sinceDday(from: ani)))Ïùº ÏßÄÎÇ®"
                }
                if aniDay > 0 {
                    resultArray.append(DdayCellData(dateName: "\(i * 100)Ïùº", date: ani, countDdays: countDday))
                }else if let aniYear = calendar.dateComponents([.year], from: firstDay, to: yearAni).year{
                    cnt += 1
                    resultArray.append(DdayCellData(dateName: "\(aniYear)Ï£ºÎÖÑ",
                                                    date: yearAni,
                                                    countDdays: countDday)
                                       )
                    resultArray.append(DdayCellData(dateName: "\(i * 100)Ïùº", date: ani, countDdays: countDday))

                }
            }
        }
        return resultArray
    }
    
}
